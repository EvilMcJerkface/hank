/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.rapleaf.hank.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HankResponse extends org.apache.thrift.TUnion<HankResponse, HankResponse._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HankResponse");
  private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("not_found", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField WRONG_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("wrong_host", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField NO_SUCH_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("no_such_domain", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField ZERO_REPLICAS_FIELD_DESC = new org.apache.thrift.protocol.TField("zero_replicas", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField INTERNAL_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("internal_error", org.apache.thrift.protocol.TType.BOOL, (short)8);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Equivalent to a "null" value
     */
    NOT_FOUND((short)1, "not_found"),
    /**
     * Single-valued result
     */
    VALUE((short)2, "value"),
    /**
     * Multi-valued result for a single key
     */
    VALUES((short)3, "values"),
    /**
     * The host queried is not assigned the key that was requested
     */
    WRONG_HOST((short)5, "wrong_host"),
    /**
     * The domain_id passed in the request does not correspond to a valid domain
     */
    NO_SUCH_DOMAIN((short)6, "no_such_domain"),
    /**
     * There were no available replicas for a given partition
     */
    ZERO_REPLICAS((short)7, "zero_replicas"),
    /**
     * There was some internal error in the server. This is pretty bad.
     */
    INTERNAL_ERROR((short)8, "internal_error");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOT_FOUND
          return NOT_FOUND;
        case 2: // VALUE
          return VALUE;
        case 3: // VALUES
          return VALUES;
        case 5: // WRONG_HOST
          return WRONG_HOST;
        case 6: // NO_SUCH_DOMAIN
          return NO_SUCH_DOMAIN;
        case 7: // ZERO_REPLICAS
          return ZERO_REPLICAS;
        case 8: // INTERNAL_ERROR
          return INTERNAL_ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("not_found", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.WRONG_HOST, new org.apache.thrift.meta_data.FieldMetaData("wrong_host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NO_SUCH_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("no_such_domain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ZERO_REPLICAS, new org.apache.thrift.meta_data.FieldMetaData("zero_replicas", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INTERNAL_ERROR, new org.apache.thrift.meta_data.FieldMetaData("internal_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HankResponse.class, metaDataMap);
  }

  public HankResponse() {
    super();
  }

  public HankResponse(_Fields setField, Object value) {
    super(setField, value);
  }

  public HankResponse(HankResponse other) {
    super(other);
  }
  public HankResponse deepCopy() {
    return new HankResponse(this);
  }

  public static HankResponse not_found(boolean value) {
    HankResponse x = new HankResponse();
    x.set_not_found(value);
    return x;
  }

  public static HankResponse value(ByteBuffer value) {
    HankResponse x = new HankResponse();
    x.set_value(value);
    return x;
  }

  public static HankResponse value(byte[] value) {
    HankResponse x = new HankResponse();
    x.set_value(ByteBuffer.wrap(value));
    return x;
  }

  public static HankResponse values(List<ByteBuffer> value) {
    HankResponse x = new HankResponse();
    x.set_values(value);
    return x;
  }

  public static HankResponse wrong_host(boolean value) {
    HankResponse x = new HankResponse();
    x.set_wrong_host(value);
    return x;
  }

  public static HankResponse no_such_domain(boolean value) {
    HankResponse x = new HankResponse();
    x.set_no_such_domain(value);
    return x;
  }

  public static HankResponse zero_replicas(boolean value) {
    HankResponse x = new HankResponse();
    x.set_zero_replicas(value);
    return x;
  }

  public static HankResponse internal_error(boolean value) {
    HankResponse x = new HankResponse();
    x.set_internal_error(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case NOT_FOUND:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'not_found', but got " + value.getClass().getSimpleName());
      case VALUE:
        if (value instanceof ByteBuffer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ByteBuffer for field 'value', but got " + value.getClass().getSimpleName());
      case VALUES:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<ByteBuffer> for field 'values', but got " + value.getClass().getSimpleName());
      case WRONG_HOST:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'wrong_host', but got " + value.getClass().getSimpleName());
      case NO_SUCH_DOMAIN:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'no_such_domain', but got " + value.getClass().getSimpleName());
      case ZERO_REPLICAS:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'zero_replicas', but got " + value.getClass().getSimpleName());
      case INTERNAL_ERROR:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'internal_error', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object readValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case NOT_FOUND:
          if (field.type == NOT_FOUND_FIELD_DESC.type) {
            Boolean not_found;
            not_found = iprot.readBool();
            return not_found;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case VALUE:
          if (field.type == VALUE_FIELD_DESC.type) {
            ByteBuffer value;
            value = iprot.readBinary();
            return value;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case VALUES:
          if (field.type == VALUES_FIELD_DESC.type) {
            List<ByteBuffer> values;
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              values = new ArrayList<ByteBuffer>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                ByteBuffer _elem2;
                _elem2 = iprot.readBinary();
                values.add(_elem2);
              }
              iprot.readListEnd();
            }
            return values;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case WRONG_HOST:
          if (field.type == WRONG_HOST_FIELD_DESC.type) {
            Boolean wrong_host;
            wrong_host = iprot.readBool();
            return wrong_host;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NO_SUCH_DOMAIN:
          if (field.type == NO_SUCH_DOMAIN_FIELD_DESC.type) {
            Boolean no_such_domain;
            no_such_domain = iprot.readBool();
            return no_such_domain;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ZERO_REPLICAS:
          if (field.type == ZERO_REPLICAS_FIELD_DESC.type) {
            Boolean zero_replicas;
            zero_replicas = iprot.readBool();
            return zero_replicas;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INTERNAL_ERROR:
          if (field.type == INTERNAL_ERROR_FIELD_DESC.type) {
            Boolean internal_error;
            internal_error = iprot.readBool();
            return internal_error;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void writeValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case NOT_FOUND:
        Boolean not_found = (Boolean)value_;
        oprot.writeBool(not_found);
        return;
      case VALUE:
        ByteBuffer value = (ByteBuffer)value_;
        oprot.writeBinary(value);
        return;
      case VALUES:
        List<ByteBuffer> values = (List<ByteBuffer>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, values.size()));
          for (ByteBuffer _iter3 : values)
          {
            oprot.writeBinary(_iter3);
          }
          oprot.writeListEnd();
        }
        return;
      case WRONG_HOST:
        Boolean wrong_host = (Boolean)value_;
        oprot.writeBool(wrong_host);
        return;
      case NO_SUCH_DOMAIN:
        Boolean no_such_domain = (Boolean)value_;
        oprot.writeBool(no_such_domain);
        return;
      case ZERO_REPLICAS:
        Boolean zero_replicas = (Boolean)value_;
        oprot.writeBool(zero_replicas);
        return;
      case INTERNAL_ERROR:
        Boolean internal_error = (Boolean)value_;
        oprot.writeBool(internal_error);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case NOT_FOUND:
        return NOT_FOUND_FIELD_DESC;
      case VALUE:
        return VALUE_FIELD_DESC;
      case VALUES:
        return VALUES_FIELD_DESC;
      case WRONG_HOST:
        return WRONG_HOST_FIELD_DESC;
      case NO_SUCH_DOMAIN:
        return NO_SUCH_DOMAIN_FIELD_DESC;
      case ZERO_REPLICAS:
        return ZERO_REPLICAS_FIELD_DESC;
      case INTERNAL_ERROR:
        return INTERNAL_ERROR_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  /**
   * Equivalent to a "null" value
   */
  public boolean get_not_found() {
    if (getSetField() == _Fields.NOT_FOUND) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'not_found' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * Equivalent to a "null" value
   */
  public void set_not_found(boolean value) {
    setField_ = _Fields.NOT_FOUND;
    value_ = value;
  }

  /**
   * Single-valued result
   */
  public byte[] get_value() {
    set_value(org.apache.thrift.TBaseHelper.rightSize(buffer_for_value()));
    ByteBuffer b = buffer_for_value();
    return b == null ? null : b.array();
  }

  public ByteBuffer buffer_for_value() {
    if (getSetField() == _Fields.VALUE) {
      return (ByteBuffer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'value' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * Single-valued result
   */
  public void set_value(byte[] value) {
    set_value(ByteBuffer.wrap(value));
  }

  public void set_value(ByteBuffer value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.VALUE;
    value_ = value;
  }

  /**
   * Multi-valued result for a single key
   */
  public List<ByteBuffer> get_values() {
    if (getSetField() == _Fields.VALUES) {
      return (List<ByteBuffer>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'values' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * Multi-valued result for a single key
   */
  public void set_values(List<ByteBuffer> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.VALUES;
    value_ = value;
  }

  /**
   * The host queried is not assigned the key that was requested
   */
  public boolean get_wrong_host() {
    if (getSetField() == _Fields.WRONG_HOST) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'wrong_host' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * The host queried is not assigned the key that was requested
   */
  public void set_wrong_host(boolean value) {
    setField_ = _Fields.WRONG_HOST;
    value_ = value;
  }

  /**
   * The domain_id passed in the request does not correspond to a valid domain
   */
  public boolean get_no_such_domain() {
    if (getSetField() == _Fields.NO_SUCH_DOMAIN) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'no_such_domain' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * The domain_id passed in the request does not correspond to a valid domain
   */
  public void set_no_such_domain(boolean value) {
    setField_ = _Fields.NO_SUCH_DOMAIN;
    value_ = value;
  }

  /**
   * There were no available replicas for a given partition
   */
  public boolean get_zero_replicas() {
    if (getSetField() == _Fields.ZERO_REPLICAS) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'zero_replicas' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * There were no available replicas for a given partition
   */
  public void set_zero_replicas(boolean value) {
    setField_ = _Fields.ZERO_REPLICAS;
    value_ = value;
  }

  /**
   * There was some internal error in the server. This is pretty bad.
   */
  public boolean get_internal_error() {
    if (getSetField() == _Fields.INTERNAL_ERROR) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'internal_error' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  /**
   * There was some internal error in the server. This is pretty bad.
   */
  public void set_internal_error(boolean value) {
    setField_ = _Fields.INTERNAL_ERROR;
    value_ = value;
  }

  public boolean equals(Object other) {
    if (other instanceof HankResponse) {
      return equals((HankResponse)other);
    } else {
      return false;
    }
  }

  public boolean equals(HankResponse other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(HankResponse other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
