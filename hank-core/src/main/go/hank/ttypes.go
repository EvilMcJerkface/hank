/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package hank;

import (
        "thrift"
        "fmt"
)



/**
 * Attributes:
 *  - WrongHost: The host queried is not assigned the key that was requested
 *  - NoSuchDomain: The domain passed in the request does not correspond to a valid domain
 *  - NoReplica: There was no replica for a given partition
 *  - NoConnectionAvailable: There were no available connections for a given partition
 *  - FailedRetries: Failed to perform query after a specified number of retries
 *  - InternalError: There was some internal error in the server. This is pretty bad.
 */
type HankException struct {
  thrift.TStruct
  WrongHost bool "wrong_host"; // 1
  NoSuchDomain bool "no_such_domain"; // 2
  NoReplica bool "no_replica"; // 3
  NoConnectionAvailable bool "no_connection_available"; // 4
  FailedRetries int32 "failed_retries"; // 5
  InternalError string "internal_error"; // 6
}

func NewHankException() *HankException {
  output := &HankException{
    TStruct:thrift.NewTStruct("HankException", []thrift.TField{
    thrift.NewTField("wrong_host", thrift.BOOL, 1),
    thrift.NewTField("no_such_domain", thrift.BOOL, 2),
    thrift.NewTField("no_replica", thrift.BOOL, 3),
    thrift.NewTField("no_connection_available", thrift.BOOL, 4),
    thrift.NewTField("failed_retries", thrift.I32, 5),
    thrift.NewTField("internal_error", thrift.STRING, 6),
    }),
  }
  {
  }
  return output
}

func (p *HankException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "wrong_host" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "no_such_domain" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "no_replica" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "no_connection_available" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "failed_retries" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "internal_error" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *HankException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadBool()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "wrong_host", p.ThriftName(), err1); }
  p.WrongHost = v0
  return err
}

func (p *HankException) ReadFieldWrongHost(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *HankException) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadBool()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "no_such_domain", p.ThriftName(), err3); }
  p.NoSuchDomain = v2
  return err
}

func (p *HankException) ReadFieldNoSuchDomain(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *HankException) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v4, err5 := iprot.ReadBool()
  if err5 != nil { return thrift.NewTProtocolExceptionReadField(3, "no_replica", p.ThriftName(), err5); }
  p.NoReplica = v4
  return err
}

func (p *HankException) ReadFieldNoReplica(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *HankException) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v6, err7 := iprot.ReadBool()
  if err7 != nil { return thrift.NewTProtocolExceptionReadField(4, "no_connection_available", p.ThriftName(), err7); }
  p.NoConnectionAvailable = v6
  return err
}

func (p *HankException) ReadFieldNoConnectionAvailable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *HankException) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v8, err9 := iprot.ReadI32()
  if err9 != nil { return thrift.NewTProtocolExceptionReadField(5, "failed_retries", p.ThriftName(), err9); }
  p.FailedRetries = v8
  return err
}

func (p *HankException) ReadFieldFailedRetries(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *HankException) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v10, err11 := iprot.ReadString()
  if err11 != nil { return thrift.NewTProtocolExceptionReadField(6, "internal_error", p.ThriftName(), err11); }
  p.InternalError = v10
  return err
}

func (p *HankException) ReadFieldInternalError(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *HankException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("HankException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *HankException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("wrong_host", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wrong_host", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.WrongHost))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wrong_host", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "wrong_host", p.ThriftName(), err); }
  return err
}

func (p *HankException) WriteFieldWrongHost(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *HankException) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("no_such_domain", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "no_such_domain", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.NoSuchDomain))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "no_such_domain", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "no_such_domain", p.ThriftName(), err); }
  return err
}

func (p *HankException) WriteFieldNoSuchDomain(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *HankException) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("no_replica", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "no_replica", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.NoReplica))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "no_replica", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "no_replica", p.ThriftName(), err); }
  return err
}

func (p *HankException) WriteFieldNoReplica(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *HankException) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("no_connection_available", thrift.BOOL, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "no_connection_available", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.NoConnectionAvailable))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "no_connection_available", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "no_connection_available", p.ThriftName(), err); }
  return err
}

func (p *HankException) WriteFieldNoConnectionAvailable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *HankException) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("failed_retries", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "failed_retries", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.FailedRetries))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "failed_retries", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "failed_retries", p.ThriftName(), err); }
  return err
}

func (p *HankException) WriteFieldFailedRetries(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *HankException) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("internal_error", thrift.STRING, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "internal_error", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.InternalError))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "internal_error", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "internal_error", p.ThriftName(), err); }
  return err
}

func (p *HankException) WriteFieldInternalError(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *HankException) TStructName() string {
  return "HankException"
}

func (p *HankException) ThriftName() string {
  return "HankException"
}

func (p *HankException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HankException(%+v)", *p)
}

func (p *HankException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*HankException)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.WrongHost, data.WrongHost); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.NoSuchDomain, data.NoSuchDomain); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.NoReplica, data.NoReplica); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.NoConnectionAvailable, data.NoConnectionAvailable); cmp != 0 {
    return cmp, true
  }
  if p.FailedRetries != data.FailedRetries {
    if p.FailedRetries < data.FailedRetries {
      return -1, true
    }
    return 1, true
  }
  if p.InternalError != data.InternalError {
    if p.InternalError < data.InternalError {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *HankException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.WrongHost
  case 2: return p.NoSuchDomain
  case 3: return p.NoReplica
  case 4: return p.NoConnectionAvailable
  case 5: return p.FailedRetries
  case 6: return p.InternalError
  }
  return nil
}

func (p *HankException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("wrong_host", thrift.BOOL, 1),
    thrift.NewTField("no_such_domain", thrift.BOOL, 2),
    thrift.NewTField("no_replica", thrift.BOOL, 3),
    thrift.NewTField("no_connection_available", thrift.BOOL, 4),
    thrift.NewTField("failed_retries", thrift.I32, 5),
    thrift.NewTField("internal_error", thrift.STRING, 6),
    })
}

/**
 * Attributes:
 *  - NotFound
 *  - Value
 *  - Xception
 */
type HankResponse struct {
  thrift.TStruct
  NotFound bool "not_found"; // 1
  Value string "value"; // 2
  Xception *HankException "xception"; // 3
}

func NewHankResponse() *HankResponse {
  output := &HankResponse{
    TStruct:thrift.NewTStruct("HankResponse", []thrift.TField{
    thrift.NewTField("not_found", thrift.BOOL, 1),
    thrift.NewTField("value", thrift.STRING, 2),
    thrift.NewTField("xception", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *HankResponse) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "not_found" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "xception" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *HankResponse) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v12, err13 := iprot.ReadBool()
  if err13 != nil { return thrift.NewTProtocolExceptionReadField(1, "not_found", p.ThriftName(), err13); }
  p.NotFound = v12
  return err
}

func (p *HankResponse) ReadFieldNotFound(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *HankResponse) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v14, err15 := iprot.ReadString()
  if err15 != nil { return thrift.NewTProtocolExceptionReadField(2, "value", p.ThriftName(), err15); }
  p.Value = v14
  return err
}

func (p *HankResponse) ReadFieldValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *HankResponse) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Xception = NewHankException()
  err18 := p.Xception.Read(iprot)
  if err18 != nil { return thrift.NewTProtocolExceptionReadStruct("p.XceptionHankException", err18); }
  return err
}

func (p *HankResponse) ReadFieldXception(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *HankResponse) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("HankResponse")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *HankResponse) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("not_found", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "not_found", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.NotFound))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "not_found", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "not_found", p.ThriftName(), err); }
  return err
}

func (p *HankResponse) WriteFieldNotFound(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *HankResponse) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("value", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "value", p.ThriftName(), err); }
  return err
}

func (p *HankResponse) WriteFieldValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *HankResponse) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Xception != nil {
    err = oprot.WriteFieldBegin("xception", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "xception", p.ThriftName(), err); }
    err = p.Xception.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HankException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "xception", p.ThriftName(), err); }
  }
  return err
}

func (p *HankResponse) WriteFieldXception(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *HankResponse) TStructName() string {
  return "HankResponse"
}

func (p *HankResponse) ThriftName() string {
  return "HankResponse"
}

func (p *HankResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HankResponse(%+v)", *p)
}

func (p *HankResponse) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*HankResponse)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.NotFound, data.NotFound); cmp != 0 {
    return cmp, true
  }
  if p.Value != data.Value {
    if p.Value < data.Value {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Xception.CompareTo(data.Xception); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *HankResponse) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.NotFound
  case 2: return p.Value
  case 3: return p.Xception
  }
  return nil
}

func (p *HankResponse) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("not_found", thrift.BOOL, 1),
    thrift.NewTField("value", thrift.STRING, 2),
    thrift.NewTField("xception", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Responses
 *  - Xception
 */
type HankBulkResponse struct {
  thrift.TStruct
  Responses thrift.TList "responses"; // 1
  Xception *HankException "xception"; // 2
}

func NewHankBulkResponse() *HankBulkResponse {
  output := &HankBulkResponse{
    TStruct:thrift.NewTStruct("HankBulkResponse", []thrift.TField{
    thrift.NewTField("responses", thrift.LIST, 1),
    thrift.NewTField("xception", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *HankBulkResponse) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "responses" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "xception" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *HankBulkResponse) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype24, _size21, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Responses", "", err)
  }
  p.Responses = thrift.NewTList(_etype24, _size21)
  for _i25:= 0; _i25 < _size21; _i25++ {
    _elem26 := NewHankResponse()
    err29 := _elem26.Read(iprot)
    if err29 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem26HankResponse", err29); }
    p.Responses.Push(_elem26)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *HankBulkResponse) ReadFieldResponses(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *HankBulkResponse) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Xception = NewHankException()
  err32 := p.Xception.Read(iprot)
  if err32 != nil { return thrift.NewTProtocolExceptionReadStruct("p.XceptionHankException", err32); }
  return err
}

func (p *HankBulkResponse) ReadFieldXception(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *HankBulkResponse) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("HankBulkResponse")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *HankBulkResponse) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Responses != nil {
    err = oprot.WriteFieldBegin("responses", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "responses", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Responses.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter33 := range p.Responses.Iter() {
      Iter34 := Iter33.(*HankResponse)
      err = Iter34.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HankResponse", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "responses", p.ThriftName(), err); }
  }
  return err
}

func (p *HankBulkResponse) WriteFieldResponses(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *HankBulkResponse) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Xception != nil {
    err = oprot.WriteFieldBegin("xception", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "xception", p.ThriftName(), err); }
    err = p.Xception.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HankException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "xception", p.ThriftName(), err); }
  }
  return err
}

func (p *HankBulkResponse) WriteFieldXception(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *HankBulkResponse) TStructName() string {
  return "HankBulkResponse"
}

func (p *HankBulkResponse) ThriftName() string {
  return "HankBulkResponse"
}

func (p *HankBulkResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HankBulkResponse(%+v)", *p)
}

func (p *HankBulkResponse) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*HankBulkResponse)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Responses.CompareTo(data.Responses); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Xception.CompareTo(data.Xception); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *HankBulkResponse) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Responses
  case 2: return p.Xception
  }
  return nil
}

func (p *HankBulkResponse) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("responses", thrift.LIST, 1),
    thrift.NewTField("xception", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Id
 *  - NumPartitions
 *  - StorageEngineFactoryClass
 *  - StorageEngineOptions
 *  - PartitionerClass
 *  - RequiredHostFlags
 *  - NextVersionNumber
 */
type DomainMetadata struct {
  thrift.TStruct
  Id int32 "id"; // 1
  NumPartitions int32 "num_partitions"; // 2
  StorageEngineFactoryClass string "storage_engine_factory_class"; // 3
  StorageEngineOptions string "storage_engine_options"; // 4
  PartitionerClass string "partitioner_class"; // 5
  RequiredHostFlags string "required_host_flags"; // 6
  NextVersionNumber int32 "next_version_number"; // 7
}

func NewDomainMetadata() *DomainMetadata {
  output := &DomainMetadata{
    TStruct:thrift.NewTStruct("DomainMetadata", []thrift.TField{
    thrift.NewTField("id", thrift.I32, 1),
    thrift.NewTField("num_partitions", thrift.I32, 2),
    thrift.NewTField("storage_engine_factory_class", thrift.STRING, 3),
    thrift.NewTField("storage_engine_options", thrift.STRING, 4),
    thrift.NewTField("partitioner_class", thrift.STRING, 5),
    thrift.NewTField("required_host_flags", thrift.STRING, 6),
    thrift.NewTField("next_version_number", thrift.I32, 7),
    }),
  }
  {
  }
  return output
}

func (p *DomainMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "id" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "num_partitions" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "storage_engine_factory_class" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "storage_engine_options" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "partitioner_class" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "required_host_flags" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "next_version_number" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DomainMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v35, err36 := iprot.ReadI32()
  if err36 != nil { return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err36); }
  p.Id = v35
  return err
}

func (p *DomainMetadata) ReadFieldId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DomainMetadata) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v37, err38 := iprot.ReadI32()
  if err38 != nil { return thrift.NewTProtocolExceptionReadField(2, "num_partitions", p.ThriftName(), err38); }
  p.NumPartitions = v37
  return err
}

func (p *DomainMetadata) ReadFieldNumPartitions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DomainMetadata) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v39, err40 := iprot.ReadString()
  if err40 != nil { return thrift.NewTProtocolExceptionReadField(3, "storage_engine_factory_class", p.ThriftName(), err40); }
  p.StorageEngineFactoryClass = v39
  return err
}

func (p *DomainMetadata) ReadFieldStorageEngineFactoryClass(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DomainMetadata) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v41, err42 := iprot.ReadString()
  if err42 != nil { return thrift.NewTProtocolExceptionReadField(4, "storage_engine_options", p.ThriftName(), err42); }
  p.StorageEngineOptions = v41
  return err
}

func (p *DomainMetadata) ReadFieldStorageEngineOptions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *DomainMetadata) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v43, err44 := iprot.ReadString()
  if err44 != nil { return thrift.NewTProtocolExceptionReadField(5, "partitioner_class", p.ThriftName(), err44); }
  p.PartitionerClass = v43
  return err
}

func (p *DomainMetadata) ReadFieldPartitionerClass(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *DomainMetadata) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v45, err46 := iprot.ReadString()
  if err46 != nil { return thrift.NewTProtocolExceptionReadField(6, "required_host_flags", p.ThriftName(), err46); }
  p.RequiredHostFlags = v45
  return err
}

func (p *DomainMetadata) ReadFieldRequiredHostFlags(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *DomainMetadata) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v47, err48 := iprot.ReadI32()
  if err48 != nil { return thrift.NewTProtocolExceptionReadField(7, "next_version_number", p.ThriftName(), err48); }
  p.NextVersionNumber = v47
  return err
}

func (p *DomainMetadata) ReadFieldNextVersionNumber(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *DomainMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DomainMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DomainMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("id", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Id))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  return err
}

func (p *DomainMetadata) WriteFieldId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DomainMetadata) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("num_partitions", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "num_partitions", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NumPartitions))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "num_partitions", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "num_partitions", p.ThriftName(), err); }
  return err
}

func (p *DomainMetadata) WriteFieldNumPartitions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DomainMetadata) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("storage_engine_factory_class", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "storage_engine_factory_class", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StorageEngineFactoryClass))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "storage_engine_factory_class", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "storage_engine_factory_class", p.ThriftName(), err); }
  return err
}

func (p *DomainMetadata) WriteFieldStorageEngineFactoryClass(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DomainMetadata) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("storage_engine_options", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "storage_engine_options", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StorageEngineOptions))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "storage_engine_options", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "storage_engine_options", p.ThriftName(), err); }
  return err
}

func (p *DomainMetadata) WriteFieldStorageEngineOptions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *DomainMetadata) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("partitioner_class", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "partitioner_class", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PartitionerClass))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "partitioner_class", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "partitioner_class", p.ThriftName(), err); }
  return err
}

func (p *DomainMetadata) WriteFieldPartitionerClass(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *DomainMetadata) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("required_host_flags", thrift.STRING, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "required_host_flags", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.RequiredHostFlags))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "required_host_flags", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "required_host_flags", p.ThriftName(), err); }
  return err
}

func (p *DomainMetadata) WriteFieldRequiredHostFlags(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *DomainMetadata) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("next_version_number", thrift.I32, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "next_version_number", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NextVersionNumber))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "next_version_number", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "next_version_number", p.ThriftName(), err); }
  return err
}

func (p *DomainMetadata) WriteFieldNextVersionNumber(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *DomainMetadata) TStructName() string {
  return "DomainMetadata"
}

func (p *DomainMetadata) ThriftName() string {
  return "DomainMetadata"
}

func (p *DomainMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainMetadata(%+v)", *p)
}

func (p *DomainMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DomainMetadata)
  if !ok {
    return 0, false
  }
  if p.Id != data.Id {
    if p.Id < data.Id {
      return -1, true
    }
    return 1, true
  }
  if p.NumPartitions != data.NumPartitions {
    if p.NumPartitions < data.NumPartitions {
      return -1, true
    }
    return 1, true
  }
  if p.StorageEngineFactoryClass != data.StorageEngineFactoryClass {
    if p.StorageEngineFactoryClass < data.StorageEngineFactoryClass {
      return -1, true
    }
    return 1, true
  }
  if p.StorageEngineOptions != data.StorageEngineOptions {
    if p.StorageEngineOptions < data.StorageEngineOptions {
      return -1, true
    }
    return 1, true
  }
  if p.PartitionerClass != data.PartitionerClass {
    if p.PartitionerClass < data.PartitionerClass {
      return -1, true
    }
    return 1, true
  }
  if p.RequiredHostFlags != data.RequiredHostFlags {
    if p.RequiredHostFlags < data.RequiredHostFlags {
      return -1, true
    }
    return 1, true
  }
  if p.NextVersionNumber != data.NextVersionNumber {
    if p.NextVersionNumber < data.NextVersionNumber {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DomainMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Id
  case 2: return p.NumPartitions
  case 3: return p.StorageEngineFactoryClass
  case 4: return p.StorageEngineOptions
  case 5: return p.PartitionerClass
  case 6: return p.RequiredHostFlags
  case 7: return p.NextVersionNumber
  }
  return nil
}

func (p *DomainMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("id", thrift.I32, 1),
    thrift.NewTField("num_partitions", thrift.I32, 2),
    thrift.NewTField("storage_engine_factory_class", thrift.STRING, 3),
    thrift.NewTField("storage_engine_options", thrift.STRING, 4),
    thrift.NewTField("partitioner_class", thrift.STRING, 5),
    thrift.NewTField("required_host_flags", thrift.STRING, 6),
    thrift.NewTField("next_version_number", thrift.I32, 7),
    })
}

/**
 * Attributes:
 *  - NumBytes
 *  - NumRecords
 */
type PartitionMetadata struct {
  thrift.TStruct
  NumBytes int64 "num_bytes"; // 1
  NumRecords int64 "num_records"; // 2
}

func NewPartitionMetadata() *PartitionMetadata {
  output := &PartitionMetadata{
    TStruct:thrift.NewTStruct("PartitionMetadata", []thrift.TField{
    thrift.NewTField("num_bytes", thrift.I64, 1),
    thrift.NewTField("num_records", thrift.I64, 2),
    }),
  }
  {
  }
  return output
}

func (p *PartitionMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "num_bytes" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "num_records" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *PartitionMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v49, err50 := iprot.ReadI64()
  if err50 != nil { return thrift.NewTProtocolExceptionReadField(1, "num_bytes", p.ThriftName(), err50); }
  p.NumBytes = v49
  return err
}

func (p *PartitionMetadata) ReadFieldNumBytes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *PartitionMetadata) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v51, err52 := iprot.ReadI64()
  if err52 != nil { return thrift.NewTProtocolExceptionReadField(2, "num_records", p.ThriftName(), err52); }
  p.NumRecords = v51
  return err
}

func (p *PartitionMetadata) ReadFieldNumRecords(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *PartitionMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("PartitionMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *PartitionMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("num_bytes", thrift.I64, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "num_bytes", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.NumBytes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "num_bytes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "num_bytes", p.ThriftName(), err); }
  return err
}

func (p *PartitionMetadata) WriteFieldNumBytes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *PartitionMetadata) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("num_records", thrift.I64, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "num_records", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.NumRecords))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "num_records", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "num_records", p.ThriftName(), err); }
  return err
}

func (p *PartitionMetadata) WriteFieldNumRecords(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *PartitionMetadata) TStructName() string {
  return "PartitionMetadata"
}

func (p *PartitionMetadata) ThriftName() string {
  return "PartitionMetadata"
}

func (p *PartitionMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionMetadata(%+v)", *p)
}

func (p *PartitionMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*PartitionMetadata)
  if !ok {
    return 0, false
  }
  if p.NumBytes != data.NumBytes {
    if p.NumBytes < data.NumBytes {
      return -1, true
    }
    return 1, true
  }
  if p.NumRecords != data.NumRecords {
    if p.NumRecords < data.NumRecords {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *PartitionMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.NumBytes
  case 2: return p.NumRecords
  }
  return nil
}

func (p *PartitionMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("num_bytes", thrift.I64, 1),
    thrift.NewTField("num_records", thrift.I64, 2),
    })
}

/**
 * Attributes:
 *  - Properties
 *  - Partitions
 *  - Defunct
 *  - ClosedAt
 */
type DomainVersionMetadata struct {
  thrift.TStruct
  Properties string "properties"; // 1
  Partitions thrift.TMap "partitions"; // 2
  Defunct bool "defunct"; // 3
  ClosedAt int64 "closed_at"; // 4
}

func NewDomainVersionMetadata() *DomainVersionMetadata {
  output := &DomainVersionMetadata{
    TStruct:thrift.NewTStruct("DomainVersionMetadata", []thrift.TField{
    thrift.NewTField("properties", thrift.STRING, 1),
    thrift.NewTField("partitions", thrift.MAP, 2),
    thrift.NewTField("defunct", thrift.BOOL, 3),
    thrift.NewTField("closed_at", thrift.I64, 4),
    }),
  }
  {
  }
  return output
}

func (p *DomainVersionMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "properties" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "partitions" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "defunct" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "closed_at" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DomainVersionMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v53, err54 := iprot.ReadString()
  if err54 != nil { return thrift.NewTProtocolExceptionReadField(1, "properties", p.ThriftName(), err54); }
  p.Properties = v53
  return err
}

func (p *DomainVersionMetadata) ReadFieldProperties(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DomainVersionMetadata) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype58, _vtype59, _size57, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Partitions", "", err)
  }
  p.Partitions = thrift.NewTMap(_ktype58, _vtype59, _size57)
  for _i61:= 0; _i61 < _size57; _i61++ {
    v64, err65 := iprot.ReadI32()
    if err65 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key62", "", err65); }
    _key62 := v64
    _val63 := NewPartitionMetadata()
    err68 := _val63.Read(iprot)
    if err68 != nil { return thrift.NewTProtocolExceptionReadStruct("_val63PartitionMetadata", err68); }
    p.Partitions.Set(_key62, _val63)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *DomainVersionMetadata) ReadFieldPartitions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DomainVersionMetadata) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v69, err70 := iprot.ReadBool()
  if err70 != nil { return thrift.NewTProtocolExceptionReadField(3, "defunct", p.ThriftName(), err70); }
  p.Defunct = v69
  return err
}

func (p *DomainVersionMetadata) ReadFieldDefunct(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DomainVersionMetadata) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v71, err72 := iprot.ReadI64()
  if err72 != nil { return thrift.NewTProtocolExceptionReadField(4, "closed_at", p.ThriftName(), err72); }
  p.ClosedAt = v71
  return err
}

func (p *DomainVersionMetadata) ReadFieldClosedAt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *DomainVersionMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DomainVersionMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DomainVersionMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("properties", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "properties", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Properties))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "properties", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "properties", p.ThriftName(), err); }
  return err
}

func (p *DomainVersionMetadata) WriteFieldProperties(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DomainVersionMetadata) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Partitions != nil {
    err = oprot.WriteFieldBegin("partitions", thrift.MAP, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "partitions", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, p.Partitions.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter73 := range p.Partitions.Iter() {
      Kiter74, Viter75 := Miter73.Key().(int32), Miter73.Value().(*PartitionMetadata)
      err = oprot.WriteI32(int32(Kiter74))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter74", "", err); }
      err = Viter75.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("PartitionMetadata", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "partitions", p.ThriftName(), err); }
  }
  return err
}

func (p *DomainVersionMetadata) WriteFieldPartitions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DomainVersionMetadata) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("defunct", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "defunct", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Defunct))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "defunct", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "defunct", p.ThriftName(), err); }
  return err
}

func (p *DomainVersionMetadata) WriteFieldDefunct(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DomainVersionMetadata) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("closed_at", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "closed_at", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.ClosedAt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "closed_at", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "closed_at", p.ThriftName(), err); }
  return err
}

func (p *DomainVersionMetadata) WriteFieldClosedAt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *DomainVersionMetadata) TStructName() string {
  return "DomainVersionMetadata"
}

func (p *DomainVersionMetadata) ThriftName() string {
  return "DomainVersionMetadata"
}

func (p *DomainVersionMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainVersionMetadata(%+v)", *p)
}

func (p *DomainVersionMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DomainVersionMetadata)
  if !ok {
    return 0, false
  }
  if p.Properties != data.Properties {
    if p.Properties < data.Properties {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Partitions.CompareTo(data.Partitions); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.Defunct, data.Defunct); cmp != 0 {
    return cmp, true
  }
  if p.ClosedAt != data.ClosedAt {
    if p.ClosedAt < data.ClosedAt {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DomainVersionMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Properties
  case 2: return p.Partitions
  case 3: return p.Defunct
  case 4: return p.ClosedAt
  }
  return nil
}

func (p *DomainVersionMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("properties", thrift.STRING, 1),
    thrift.NewTField("partitions", thrift.MAP, 2),
    thrift.NewTField("defunct", thrift.BOOL, 3),
    thrift.NewTField("closed_at", thrift.I64, 4),
    })
}

/**
 * Attributes:
 *  - DomainVersions
 */
type DomainGroupMetadata struct {
  thrift.TStruct
  DomainVersions thrift.TMap "domain_versions"; // 1
}

func NewDomainGroupMetadata() *DomainGroupMetadata {
  output := &DomainGroupMetadata{
    TStruct:thrift.NewTStruct("DomainGroupMetadata", []thrift.TField{
    thrift.NewTField("domain_versions", thrift.MAP, 1),
    }),
  }
  {
  }
  return output
}

func (p *DomainGroupMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "domain_versions" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DomainGroupMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype79, _vtype80, _size78, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.DomainVersions", "", err)
  }
  p.DomainVersions = thrift.NewTMap(_ktype79, _vtype80, _size78)
  for _i82:= 0; _i82 < _size78; _i82++ {
    v85, err86 := iprot.ReadI32()
    if err86 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key83", "", err86); }
    _key83 := v85
    v87, err88 := iprot.ReadI32()
    if err88 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val84", "", err88); }
    _val84 := v87
    p.DomainVersions.Set(_key83, _val84)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *DomainGroupMetadata) ReadFieldDomainVersions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DomainGroupMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DomainGroupMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DomainGroupMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.DomainVersions != nil {
    err = oprot.WriteFieldBegin("domain_versions", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domain_versions", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.I32, thrift.I32, p.DomainVersions.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter89 := range p.DomainVersions.Iter() {
      Kiter90, Viter91 := Miter89.Key().(int32), Miter89.Value().(int32)
      err = oprot.WriteI32(int32(Kiter90))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter90", "", err); }
      err = oprot.WriteI32(int32(Viter91))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter91", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domain_versions", p.ThriftName(), err); }
  }
  return err
}

func (p *DomainGroupMetadata) WriteFieldDomainVersions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DomainGroupMetadata) TStructName() string {
  return "DomainGroupMetadata"
}

func (p *DomainGroupMetadata) ThriftName() string {
  return "DomainGroupMetadata"
}

func (p *DomainGroupMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainGroupMetadata(%+v)", *p)
}

func (p *DomainGroupMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DomainGroupMetadata)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.DomainVersions.CompareTo(data.DomainVersions); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DomainGroupMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DomainVersions
  }
  return nil
}

func (p *DomainGroupMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("domain_versions", thrift.MAP, 1),
    })
}

/**
 * Attributes:
 *  - CurrentVersionNumber
 *  - Deletable
 */
type HostDomainPartitionMetadata struct {
  thrift.TStruct
  CurrentVersionNumber int32 "current_version_number"; // 1
  Deletable bool "deletable"; // 2
}

func NewHostDomainPartitionMetadata() *HostDomainPartitionMetadata {
  output := &HostDomainPartitionMetadata{
    TStruct:thrift.NewTStruct("HostDomainPartitionMetadata", []thrift.TField{
    thrift.NewTField("current_version_number", thrift.I32, 1),
    thrift.NewTField("deletable", thrift.BOOL, 2),
    }),
  }
  {
  }
  return output
}

func (p *HostDomainPartitionMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "current_version_number" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "deletable" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *HostDomainPartitionMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v92, err93 := iprot.ReadI32()
  if err93 != nil { return thrift.NewTProtocolExceptionReadField(1, "current_version_number", p.ThriftName(), err93); }
  p.CurrentVersionNumber = v92
  return err
}

func (p *HostDomainPartitionMetadata) ReadFieldCurrentVersionNumber(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *HostDomainPartitionMetadata) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v94, err95 := iprot.ReadBool()
  if err95 != nil { return thrift.NewTProtocolExceptionReadField(2, "deletable", p.ThriftName(), err95); }
  p.Deletable = v94
  return err
}

func (p *HostDomainPartitionMetadata) ReadFieldDeletable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *HostDomainPartitionMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("HostDomainPartitionMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *HostDomainPartitionMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("current_version_number", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "current_version_number", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.CurrentVersionNumber))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "current_version_number", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "current_version_number", p.ThriftName(), err); }
  return err
}

func (p *HostDomainPartitionMetadata) WriteFieldCurrentVersionNumber(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *HostDomainPartitionMetadata) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("deletable", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "deletable", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Deletable))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "deletable", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "deletable", p.ThriftName(), err); }
  return err
}

func (p *HostDomainPartitionMetadata) WriteFieldDeletable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *HostDomainPartitionMetadata) TStructName() string {
  return "HostDomainPartitionMetadata"
}

func (p *HostDomainPartitionMetadata) ThriftName() string {
  return "HostDomainPartitionMetadata"
}

func (p *HostDomainPartitionMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostDomainPartitionMetadata(%+v)", *p)
}

func (p *HostDomainPartitionMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*HostDomainPartitionMetadata)
  if !ok {
    return 0, false
  }
  if p.CurrentVersionNumber != data.CurrentVersionNumber {
    if p.CurrentVersionNumber < data.CurrentVersionNumber {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.Deletable, data.Deletable); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *HostDomainPartitionMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.CurrentVersionNumber
  case 2: return p.Deletable
  }
  return nil
}

func (p *HostDomainPartitionMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("current_version_number", thrift.I32, 1),
    thrift.NewTField("deletable", thrift.BOOL, 2),
    })
}

/**
 * Attributes:
 *  - Partitions
 */
type HostDomainMetadata struct {
  thrift.TStruct
  Partitions thrift.TMap "partitions"; // 1
}

func NewHostDomainMetadata() *HostDomainMetadata {
  output := &HostDomainMetadata{
    TStruct:thrift.NewTStruct("HostDomainMetadata", []thrift.TField{
    thrift.NewTField("partitions", thrift.MAP, 1),
    }),
  }
  {
  }
  return output
}

func (p *HostDomainMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "partitions" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *HostDomainMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype99, _vtype100, _size98, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Partitions", "", err)
  }
  p.Partitions = thrift.NewTMap(_ktype99, _vtype100, _size98)
  for _i102:= 0; _i102 < _size98; _i102++ {
    v105, err106 := iprot.ReadI32()
    if err106 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key103", "", err106); }
    _key103 := v105
    _val104 := NewHostDomainPartitionMetadata()
    err109 := _val104.Read(iprot)
    if err109 != nil { return thrift.NewTProtocolExceptionReadStruct("_val104HostDomainPartitionMetadata", err109); }
    p.Partitions.Set(_key103, _val104)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *HostDomainMetadata) ReadFieldPartitions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *HostDomainMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("HostDomainMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *HostDomainMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Partitions != nil {
    err = oprot.WriteFieldBegin("partitions", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "partitions", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, p.Partitions.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter110 := range p.Partitions.Iter() {
      Kiter111, Viter112 := Miter110.Key().(int32), Miter110.Value().(*HostDomainPartitionMetadata)
      err = oprot.WriteI32(int32(Kiter111))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter111", "", err); }
      err = Viter112.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HostDomainPartitionMetadata", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "partitions", p.ThriftName(), err); }
  }
  return err
}

func (p *HostDomainMetadata) WriteFieldPartitions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *HostDomainMetadata) TStructName() string {
  return "HostDomainMetadata"
}

func (p *HostDomainMetadata) ThriftName() string {
  return "HostDomainMetadata"
}

func (p *HostDomainMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostDomainMetadata(%+v)", *p)
}

func (p *HostDomainMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*HostDomainMetadata)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Partitions.CompareTo(data.Partitions); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *HostDomainMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Partitions
  }
  return nil
}

func (p *HostDomainMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("partitions", thrift.MAP, 1),
    })
}

/**
 * Attributes:
 *  - Domains
 */
type HostAssignmentsMetadata struct {
  thrift.TStruct
  Domains thrift.TMap "domains"; // 1
}

func NewHostAssignmentsMetadata() *HostAssignmentsMetadata {
  output := &HostAssignmentsMetadata{
    TStruct:thrift.NewTStruct("HostAssignmentsMetadata", []thrift.TField{
    thrift.NewTField("domains", thrift.MAP, 1),
    }),
  }
  {
  }
  return output
}

func (p *HostAssignmentsMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "domains" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *HostAssignmentsMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype116, _vtype117, _size115, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Domains", "", err)
  }
  p.Domains = thrift.NewTMap(_ktype116, _vtype117, _size115)
  for _i119:= 0; _i119 < _size115; _i119++ {
    v122, err123 := iprot.ReadI32()
    if err123 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key120", "", err123); }
    _key120 := v122
    _val121 := NewHostDomainMetadata()
    err126 := _val121.Read(iprot)
    if err126 != nil { return thrift.NewTProtocolExceptionReadStruct("_val121HostDomainMetadata", err126); }
    p.Domains.Set(_key120, _val121)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *HostAssignmentsMetadata) ReadFieldDomains(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *HostAssignmentsMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("HostAssignmentsMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *HostAssignmentsMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Domains != nil {
    err = oprot.WriteFieldBegin("domains", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domains", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, p.Domains.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter127 := range p.Domains.Iter() {
      Kiter128, Viter129 := Miter127.Key().(int32), Miter127.Value().(*HostDomainMetadata)
      err = oprot.WriteI32(int32(Kiter128))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter128", "", err); }
      err = Viter129.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HostDomainMetadata", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domains", p.ThriftName(), err); }
  }
  return err
}

func (p *HostAssignmentsMetadata) WriteFieldDomains(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *HostAssignmentsMetadata) TStructName() string {
  return "HostAssignmentsMetadata"
}

func (p *HostAssignmentsMetadata) ThriftName() string {
  return "HostAssignmentsMetadata"
}

func (p *HostAssignmentsMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostAssignmentsMetadata(%+v)", *p)
}

func (p *HostAssignmentsMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*HostAssignmentsMetadata)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Domains.CompareTo(data.Domains); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *HostAssignmentsMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Domains
  }
  return nil
}

func (p *HostAssignmentsMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("domains", thrift.MAP, 1),
    })
}

/**
 * Attributes:
 *  - Flags
 *  - HostName
 *  - PortNumber
 *  - EnvironmentFlags
 */
type HostMetadata struct {
  thrift.TStruct
  Flags string "flags"; // 1
  HostName string "host_name"; // 2
  PortNumber int32 "port_number"; // 3
  EnvironmentFlags thrift.TMap "environment_flags"; // 4
}

func NewHostMetadata() *HostMetadata {
  output := &HostMetadata{
    TStruct:thrift.NewTStruct("HostMetadata", []thrift.TField{
    thrift.NewTField("flags", thrift.STRING, 1),
    thrift.NewTField("host_name", thrift.STRING, 2),
    thrift.NewTField("port_number", thrift.I32, 3),
    thrift.NewTField("environment_flags", thrift.MAP, 4),
    }),
  }
  {
  }
  return output
}

func (p *HostMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "flags" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "host_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "port_number" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "environment_flags" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *HostMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v130, err131 := iprot.ReadString()
  if err131 != nil { return thrift.NewTProtocolExceptionReadField(1, "flags", p.ThriftName(), err131); }
  p.Flags = v130
  return err
}

func (p *HostMetadata) ReadFieldFlags(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *HostMetadata) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v132, err133 := iprot.ReadString()
  if err133 != nil { return thrift.NewTProtocolExceptionReadField(2, "host_name", p.ThriftName(), err133); }
  p.HostName = v132
  return err
}

func (p *HostMetadata) ReadFieldHostName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *HostMetadata) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v134, err135 := iprot.ReadI32()
  if err135 != nil { return thrift.NewTProtocolExceptionReadField(3, "port_number", p.ThriftName(), err135); }
  p.PortNumber = v134
  return err
}

func (p *HostMetadata) ReadFieldPortNumber(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *HostMetadata) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype139, _vtype140, _size138, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.EnvironmentFlags", "", err)
  }
  p.EnvironmentFlags = thrift.NewTMap(_ktype139, _vtype140, _size138)
  for _i142:= 0; _i142 < _size138; _i142++ {
    v145, err146 := iprot.ReadString()
    if err146 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key143", "", err146); }
    _key143 := v145
    v147, err148 := iprot.ReadString()
    if err148 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val144", "", err148); }
    _val144 := v147
    p.EnvironmentFlags.Set(_key143, _val144)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *HostMetadata) ReadFieldEnvironmentFlags(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *HostMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("HostMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *HostMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("flags", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "flags", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Flags))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "flags", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "flags", p.ThriftName(), err); }
  return err
}

func (p *HostMetadata) WriteFieldFlags(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *HostMetadata) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("host_name", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "host_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.HostName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "host_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "host_name", p.ThriftName(), err); }
  return err
}

func (p *HostMetadata) WriteFieldHostName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *HostMetadata) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("port_number", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "port_number", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.PortNumber))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "port_number", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "port_number", p.ThriftName(), err); }
  return err
}

func (p *HostMetadata) WriteFieldPortNumber(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *HostMetadata) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.EnvironmentFlags != nil {
    err = oprot.WriteFieldBegin("environment_flags", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "environment_flags", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.EnvironmentFlags.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter149 := range p.EnvironmentFlags.Iter() {
      Kiter150, Viter151 := Miter149.Key().(string), Miter149.Value().(string)
      err = oprot.WriteString(string(Kiter150))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter150", "", err); }
      err = oprot.WriteString(string(Viter151))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter151", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "environment_flags", p.ThriftName(), err); }
  }
  return err
}

func (p *HostMetadata) WriteFieldEnvironmentFlags(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *HostMetadata) TStructName() string {
  return "HostMetadata"
}

func (p *HostMetadata) ThriftName() string {
  return "HostMetadata"
}

func (p *HostMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostMetadata(%+v)", *p)
}

func (p *HostMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*HostMetadata)
  if !ok {
    return 0, false
  }
  if p.Flags != data.Flags {
    if p.Flags < data.Flags {
      return -1, true
    }
    return 1, true
  }
  if p.HostName != data.HostName {
    if p.HostName < data.HostName {
      return -1, true
    }
    return 1, true
  }
  if p.PortNumber != data.PortNumber {
    if p.PortNumber < data.PortNumber {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.EnvironmentFlags.CompareTo(data.EnvironmentFlags); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *HostMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Flags
  case 2: return p.HostName
  case 3: return p.PortNumber
  case 4: return p.EnvironmentFlags
  }
  return nil
}

func (p *HostMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("flags", thrift.STRING, 1),
    thrift.NewTField("host_name", thrift.STRING, 2),
    thrift.NewTField("port_number", thrift.I32, 3),
    thrift.NewTField("environment_flags", thrift.MAP, 4),
    })
}

/**
 * Attributes:
 *  - Statistics
 */
type StatisticsMetadata struct {
  thrift.TStruct
  Statistics thrift.TMap "statistics"; // 1
}

func NewStatisticsMetadata() *StatisticsMetadata {
  output := &StatisticsMetadata{
    TStruct:thrift.NewTStruct("StatisticsMetadata", []thrift.TField{
    thrift.NewTField("statistics", thrift.MAP, 1),
    }),
  }
  {
  }
  return output
}

func (p *StatisticsMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "statistics" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *StatisticsMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype155, _vtype156, _size154, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Statistics", "", err)
  }
  p.Statistics = thrift.NewTMap(_ktype155, _vtype156, _size154)
  for _i158:= 0; _i158 < _size154; _i158++ {
    v161, err162 := iprot.ReadString()
    if err162 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key159", "", err162); }
    _key159 := v161
    v163, err164 := iprot.ReadString()
    if err164 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val160", "", err164); }
    _val160 := v163
    p.Statistics.Set(_key159, _val160)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *StatisticsMetadata) ReadFieldStatistics(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *StatisticsMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("StatisticsMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *StatisticsMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Statistics != nil {
    err = oprot.WriteFieldBegin("statistics", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "statistics", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.Statistics.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter165 := range p.Statistics.Iter() {
      Kiter166, Viter167 := Miter165.Key().(string), Miter165.Value().(string)
      err = oprot.WriteString(string(Kiter166))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter166", "", err); }
      err = oprot.WriteString(string(Viter167))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter167", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "statistics", p.ThriftName(), err); }
  }
  return err
}

func (p *StatisticsMetadata) WriteFieldStatistics(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *StatisticsMetadata) TStructName() string {
  return "StatisticsMetadata"
}

func (p *StatisticsMetadata) ThriftName() string {
  return "StatisticsMetadata"
}

func (p *StatisticsMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatisticsMetadata(%+v)", *p)
}

func (p *StatisticsMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*StatisticsMetadata)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Statistics.CompareTo(data.Statistics); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *StatisticsMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Statistics
  }
  return nil
}

func (p *StatisticsMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("statistics", thrift.MAP, 1),
    })
}

/**
 * Attributes:
 *  - Host
 *  - ConnectedAt
 *  - TypeA1
 *  - Version
 */
type ClientMetadata struct {
  thrift.TStruct
  Host string "host"; // 1
  ConnectedAt int64 "connected_at"; // 2
  TypeA1 string "type"; // 3
  Version string "version"; // 4
}

func NewClientMetadata() *ClientMetadata {
  output := &ClientMetadata{
    TStruct:thrift.NewTStruct("ClientMetadata", []thrift.TField{
    thrift.NewTField("host", thrift.STRING, 1),
    thrift.NewTField("connected_at", thrift.I64, 2),
    thrift.NewTField("type", thrift.STRING, 3),
    thrift.NewTField("version", thrift.STRING, 4),
    }),
  }
  {
  }
  return output
}

func (p *ClientMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "host" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "connected_at" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "type" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "version" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ClientMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v168, err169 := iprot.ReadString()
  if err169 != nil { return thrift.NewTProtocolExceptionReadField(1, "host", p.ThriftName(), err169); }
  p.Host = v168
  return err
}

func (p *ClientMetadata) ReadFieldHost(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ClientMetadata) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v170, err171 := iprot.ReadI64()
  if err171 != nil { return thrift.NewTProtocolExceptionReadField(2, "connected_at", p.ThriftName(), err171); }
  p.ConnectedAt = v170
  return err
}

func (p *ClientMetadata) ReadFieldConnectedAt(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ClientMetadata) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v172, err173 := iprot.ReadString()
  if err173 != nil { return thrift.NewTProtocolExceptionReadField(3, "type", p.ThriftName(), err173); }
  p.TypeA1 = v172
  return err
}

func (p *ClientMetadata) ReadFieldType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ClientMetadata) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v174, err175 := iprot.ReadString()
  if err175 != nil { return thrift.NewTProtocolExceptionReadField(4, "version", p.ThriftName(), err175); }
  p.Version = v174
  return err
}

func (p *ClientMetadata) ReadFieldVersion(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ClientMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ClientMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ClientMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("host", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Host))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "host", p.ThriftName(), err); }
  return err
}

func (p *ClientMetadata) WriteFieldHost(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ClientMetadata) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("connected_at", thrift.I64, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "connected_at", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.ConnectedAt))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "connected_at", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "connected_at", p.ThriftName(), err); }
  return err
}

func (p *ClientMetadata) WriteFieldConnectedAt(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ClientMetadata) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("type", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "type", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TypeA1))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "type", p.ThriftName(), err); }
  return err
}

func (p *ClientMetadata) WriteFieldType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ClientMetadata) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("version", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "version", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Version))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "version", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "version", p.ThriftName(), err); }
  return err
}

func (p *ClientMetadata) WriteFieldVersion(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ClientMetadata) TStructName() string {
  return "ClientMetadata"
}

func (p *ClientMetadata) ThriftName() string {
  return "ClientMetadata"
}

func (p *ClientMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientMetadata(%+v)", *p)
}

func (p *ClientMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ClientMetadata)
  if !ok {
    return 0, false
  }
  if p.Host != data.Host {
    if p.Host < data.Host {
      return -1, true
    }
    return 1, true
  }
  if p.ConnectedAt != data.ConnectedAt {
    if p.ConnectedAt < data.ConnectedAt {
      return -1, true
    }
    return 1, true
  }
  if p.TypeA1 != data.TypeA1 {
    if p.TypeA1 < data.TypeA1 {
      return -1, true
    }
    return 1, true
  }
  if p.Version != data.Version {
    if p.Version < data.Version {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ClientMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Host
  case 2: return p.ConnectedAt
  case 3: return p.TypeA1
  case 4: return p.Version
  }
  return nil
}

func (p *ClientMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("host", thrift.STRING, 1),
    thrift.NewTField("connected_at", thrift.I64, 2),
    thrift.NewTField("type", thrift.STRING, 3),
    thrift.NewTField("version", thrift.STRING, 4),
    })
}

/**
 * Attributes:
 *  - Minimum
 *  - Maximum
 *  - NumValues
 *  - Total
 *  - Deciles
 */
type LatencySampleSummary struct {
  thrift.TStruct
  Minimum float64 "minimum"; // 1
  Maximum float64 "maximum"; // 2
  NumValues int64 "num_values"; // 3
  Total float64 "total"; // 4
  _ interface{} "deciles"; // nil # 5
  Deciles thrift.TList "deciles"; // 6
}

func NewLatencySampleSummary() *LatencySampleSummary {
  output := &LatencySampleSummary{
    TStruct:thrift.NewTStruct("LatencySampleSummary", []thrift.TField{
    thrift.NewTField("minimum", thrift.DOUBLE, 1),
    thrift.NewTField("maximum", thrift.DOUBLE, 2),
    thrift.NewTField("num_values", thrift.I64, 3),
    thrift.NewTField("total", thrift.DOUBLE, 4),
    thrift.NewTField("deciles", thrift.LIST, 6),
    }),
  }
  {
  }
  return output
}

func (p *LatencySampleSummary) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "minimum" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "maximum" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "num_values" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "total" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "deciles" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *LatencySampleSummary) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v176, err177 := iprot.ReadDouble()
  if err177 != nil { return thrift.NewTProtocolExceptionReadField(1, "minimum", p.ThriftName(), err177); }
  p.Minimum = v176
  return err
}

func (p *LatencySampleSummary) ReadFieldMinimum(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *LatencySampleSummary) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v178, err179 := iprot.ReadDouble()
  if err179 != nil { return thrift.NewTProtocolExceptionReadField(2, "maximum", p.ThriftName(), err179); }
  p.Maximum = v178
  return err
}

func (p *LatencySampleSummary) ReadFieldMaximum(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *LatencySampleSummary) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v180, err181 := iprot.ReadI64()
  if err181 != nil { return thrift.NewTProtocolExceptionReadField(3, "num_values", p.ThriftName(), err181); }
  p.NumValues = v180
  return err
}

func (p *LatencySampleSummary) ReadFieldNumValues(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *LatencySampleSummary) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v182, err183 := iprot.ReadDouble()
  if err183 != nil { return thrift.NewTProtocolExceptionReadField(4, "total", p.ThriftName(), err183); }
  p.Total = v182
  return err
}

func (p *LatencySampleSummary) ReadFieldTotal(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *LatencySampleSummary) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype189, _size186, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Deciles", "", err)
  }
  p.Deciles = thrift.NewTList(_etype189, _size186)
  for _i190:= 0; _i190 < _size186; _i190++ {
    v192, err193 := iprot.ReadDouble()
    if err193 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem191", "", err193); }
    _elem191 := v192
    p.Deciles.Push(_elem191)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *LatencySampleSummary) ReadFieldDeciles(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *LatencySampleSummary) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("LatencySampleSummary")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *LatencySampleSummary) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("minimum", thrift.DOUBLE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "minimum", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p.Minimum))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "minimum", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "minimum", p.ThriftName(), err); }
  return err
}

func (p *LatencySampleSummary) WriteFieldMinimum(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *LatencySampleSummary) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("maximum", thrift.DOUBLE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maximum", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p.Maximum))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maximum", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maximum", p.ThriftName(), err); }
  return err
}

func (p *LatencySampleSummary) WriteFieldMaximum(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *LatencySampleSummary) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("num_values", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "num_values", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.NumValues))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "num_values", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "num_values", p.ThriftName(), err); }
  return err
}

func (p *LatencySampleSummary) WriteFieldNumValues(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *LatencySampleSummary) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("total", thrift.DOUBLE, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "total", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p.Total))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "total", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "total", p.ThriftName(), err); }
  return err
}

func (p *LatencySampleSummary) WriteFieldTotal(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *LatencySampleSummary) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Deciles != nil {
    err = oprot.WriteFieldBegin("deciles", thrift.LIST, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "deciles", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.DOUBLE, p.Deciles.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter194 := range p.Deciles.Iter() {
      Iter195 := Iter194.(float64)
      err = oprot.WriteDouble(float64(Iter195))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter195", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "deciles", p.ThriftName(), err); }
  }
  return err
}

func (p *LatencySampleSummary) WriteFieldDeciles(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *LatencySampleSummary) TStructName() string {
  return "LatencySampleSummary"
}

func (p *LatencySampleSummary) ThriftName() string {
  return "LatencySampleSummary"
}

func (p *LatencySampleSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LatencySampleSummary(%+v)", *p)
}

func (p *LatencySampleSummary) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*LatencySampleSummary)
  if !ok {
    return 0, false
  }
  if p.Minimum != data.Minimum {
    if p.Minimum < data.Minimum {
      return -1, true
    }
    return 1, true
  }
  if p.Maximum != data.Maximum {
    if p.Maximum < data.Maximum {
      return -1, true
    }
    return 1, true
  }
  if p.NumValues != data.NumValues {
    if p.NumValues < data.NumValues {
      return -1, true
    }
    return 1, true
  }
  if p.Total != data.Total {
    if p.Total < data.Total {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Deciles.CompareTo(data.Deciles); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *LatencySampleSummary) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Minimum
  case 2: return p.Maximum
  case 3: return p.NumValues
  case 4: return p.Total
  case 6: return p.Deciles
  }
  return nil
}

func (p *LatencySampleSummary) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("minimum", thrift.DOUBLE, 1),
    thrift.NewTField("maximum", thrift.DOUBLE, 2),
    thrift.NewTField("num_values", thrift.I64, 3),
    thrift.NewTField("total", thrift.DOUBLE, 4),
    thrift.NewTField("deciles", thrift.LIST, 6),
    })
}

/**
 * Attributes:
 *  - Id
 *  - ThroughputTotal
 *  - ResponseDataThroughputTotal
 *  - NumRequestsTotal
 *  - NumHitsTotal
 *  - NumL1CacheHitsTotal
 *  - NumL2CacheHitsTotal
 *  - CacheNumItems
 *  - CacheMaxNumItems
 *  - CacheNumManagedBytes
 *  - CacheMaxNumManagedBytes
 *  - LatencySummary
 */
type DomainStatisticsSummary struct {
  thrift.TStruct
  Id int32 "id"; // 1
  ThroughputTotal float64 "throughput_total"; // 2
  ResponseDataThroughputTotal float64 "response_data_throughput_total"; // 3
  NumRequestsTotal int64 "num_requests_total"; // 4
  NumHitsTotal int64 "num_hits_total"; // 5
  NumL1CacheHitsTotal int64 "num_l1_cache_hits_total"; // 6
  NumL2CacheHitsTotal int64 "num_l2_cache_hits_total"; // 7
  CacheNumItems int64 "cache_num_items"; // 8
  CacheMaxNumItems int64 "cache_max_num_items"; // 9
  CacheNumManagedBytes int64 "cache_num_managed_bytes"; // 10
  CacheMaxNumManagedBytes int64 "cache_max_num_managed_bytes"; // 11
  LatencySummary *LatencySampleSummary "latency_summary"; // 12
}

func NewDomainStatisticsSummary() *DomainStatisticsSummary {
  output := &DomainStatisticsSummary{
    TStruct:thrift.NewTStruct("DomainStatisticsSummary", []thrift.TField{
    thrift.NewTField("id", thrift.I32, 1),
    thrift.NewTField("throughput_total", thrift.DOUBLE, 2),
    thrift.NewTField("response_data_throughput_total", thrift.DOUBLE, 3),
    thrift.NewTField("num_requests_total", thrift.I64, 4),
    thrift.NewTField("num_hits_total", thrift.I64, 5),
    thrift.NewTField("num_l1_cache_hits_total", thrift.I64, 6),
    thrift.NewTField("num_l2_cache_hits_total", thrift.I64, 7),
    thrift.NewTField("cache_num_items", thrift.I64, 8),
    thrift.NewTField("cache_max_num_items", thrift.I64, 9),
    thrift.NewTField("cache_num_managed_bytes", thrift.I64, 10),
    thrift.NewTField("cache_max_num_managed_bytes", thrift.I64, 11),
    thrift.NewTField("latency_summary", thrift.STRUCT, 12),
    }),
  }
  {
  }
  return output
}

func (p *DomainStatisticsSummary) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "id" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "throughput_total" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "response_data_throughput_total" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "num_requests_total" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "num_hits_total" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "num_l1_cache_hits_total" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "num_l2_cache_hits_total" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "cache_num_items" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "cache_max_num_items" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 10 || fieldName == "cache_num_managed_bytes" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 11 || fieldName == "cache_max_num_managed_bytes" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 12 || fieldName == "latency_summary" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v196, err197 := iprot.ReadI32()
  if err197 != nil { return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err197); }
  p.Id = v196
  return err
}

func (p *DomainStatisticsSummary) ReadFieldId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DomainStatisticsSummary) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v198, err199 := iprot.ReadDouble()
  if err199 != nil { return thrift.NewTProtocolExceptionReadField(2, "throughput_total", p.ThriftName(), err199); }
  p.ThroughputTotal = v198
  return err
}

func (p *DomainStatisticsSummary) ReadFieldThroughputTotal(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DomainStatisticsSummary) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v200, err201 := iprot.ReadDouble()
  if err201 != nil { return thrift.NewTProtocolExceptionReadField(3, "response_data_throughput_total", p.ThriftName(), err201); }
  p.ResponseDataThroughputTotal = v200
  return err
}

func (p *DomainStatisticsSummary) ReadFieldResponseDataThroughputTotal(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DomainStatisticsSummary) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v202, err203 := iprot.ReadI64()
  if err203 != nil { return thrift.NewTProtocolExceptionReadField(4, "num_requests_total", p.ThriftName(), err203); }
  p.NumRequestsTotal = v202
  return err
}

func (p *DomainStatisticsSummary) ReadFieldNumRequestsTotal(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *DomainStatisticsSummary) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v204, err205 := iprot.ReadI64()
  if err205 != nil { return thrift.NewTProtocolExceptionReadField(5, "num_hits_total", p.ThriftName(), err205); }
  p.NumHitsTotal = v204
  return err
}

func (p *DomainStatisticsSummary) ReadFieldNumHitsTotal(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *DomainStatisticsSummary) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v206, err207 := iprot.ReadI64()
  if err207 != nil { return thrift.NewTProtocolExceptionReadField(6, "num_l1_cache_hits_total", p.ThriftName(), err207); }
  p.NumL1CacheHitsTotal = v206
  return err
}

func (p *DomainStatisticsSummary) ReadFieldNumL1CacheHitsTotal(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *DomainStatisticsSummary) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v208, err209 := iprot.ReadI64()
  if err209 != nil { return thrift.NewTProtocolExceptionReadField(7, "num_l2_cache_hits_total", p.ThriftName(), err209); }
  p.NumL2CacheHitsTotal = v208
  return err
}

func (p *DomainStatisticsSummary) ReadFieldNumL2CacheHitsTotal(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *DomainStatisticsSummary) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v210, err211 := iprot.ReadI64()
  if err211 != nil { return thrift.NewTProtocolExceptionReadField(8, "cache_num_items", p.ThriftName(), err211); }
  p.CacheNumItems = v210
  return err
}

func (p *DomainStatisticsSummary) ReadFieldCacheNumItems(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *DomainStatisticsSummary) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v212, err213 := iprot.ReadI64()
  if err213 != nil { return thrift.NewTProtocolExceptionReadField(9, "cache_max_num_items", p.ThriftName(), err213); }
  p.CacheMaxNumItems = v212
  return err
}

func (p *DomainStatisticsSummary) ReadFieldCacheMaxNumItems(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *DomainStatisticsSummary) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v214, err215 := iprot.ReadI64()
  if err215 != nil { return thrift.NewTProtocolExceptionReadField(10, "cache_num_managed_bytes", p.ThriftName(), err215); }
  p.CacheNumManagedBytes = v214
  return err
}

func (p *DomainStatisticsSummary) ReadFieldCacheNumManagedBytes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField10(iprot)
}

func (p *DomainStatisticsSummary) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v216, err217 := iprot.ReadI64()
  if err217 != nil { return thrift.NewTProtocolExceptionReadField(11, "cache_max_num_managed_bytes", p.ThriftName(), err217); }
  p.CacheMaxNumManagedBytes = v216
  return err
}

func (p *DomainStatisticsSummary) ReadFieldCacheMaxNumManagedBytes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField11(iprot)
}

func (p *DomainStatisticsSummary) ReadField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.LatencySummary = NewLatencySampleSummary()
  err220 := p.LatencySummary.Read(iprot)
  if err220 != nil { return thrift.NewTProtocolExceptionReadStruct("p.LatencySummaryLatencySampleSummary", err220); }
  return err
}

func (p *DomainStatisticsSummary) ReadFieldLatencySummary(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField12(iprot)
}

func (p *DomainStatisticsSummary) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DomainStatisticsSummary")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = p.WriteField10(oprot)
  if err != nil { return err }
  err = p.WriteField11(oprot)
  if err != nil { return err }
  err = p.WriteField12(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("id", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Id))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DomainStatisticsSummary) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("throughput_total", thrift.DOUBLE, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "throughput_total", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p.ThroughputTotal))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "throughput_total", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "throughput_total", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldThroughputTotal(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DomainStatisticsSummary) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("response_data_throughput_total", thrift.DOUBLE, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "response_data_throughput_total", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p.ResponseDataThroughputTotal))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "response_data_throughput_total", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "response_data_throughput_total", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldResponseDataThroughputTotal(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DomainStatisticsSummary) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("num_requests_total", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "num_requests_total", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.NumRequestsTotal))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "num_requests_total", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "num_requests_total", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldNumRequestsTotal(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *DomainStatisticsSummary) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("num_hits_total", thrift.I64, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "num_hits_total", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.NumHitsTotal))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "num_hits_total", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "num_hits_total", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldNumHitsTotal(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *DomainStatisticsSummary) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("num_l1_cache_hits_total", thrift.I64, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "num_l1_cache_hits_total", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.NumL1CacheHitsTotal))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "num_l1_cache_hits_total", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "num_l1_cache_hits_total", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldNumL1CacheHitsTotal(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *DomainStatisticsSummary) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("num_l2_cache_hits_total", thrift.I64, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "num_l2_cache_hits_total", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.NumL2CacheHitsTotal))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "num_l2_cache_hits_total", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "num_l2_cache_hits_total", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldNumL2CacheHitsTotal(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *DomainStatisticsSummary) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("cache_num_items", thrift.I64, 8)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "cache_num_items", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.CacheNumItems))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "cache_num_items", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "cache_num_items", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldCacheNumItems(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *DomainStatisticsSummary) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("cache_max_num_items", thrift.I64, 9)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "cache_max_num_items", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.CacheMaxNumItems))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "cache_max_num_items", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "cache_max_num_items", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldCacheMaxNumItems(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *DomainStatisticsSummary) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("cache_num_managed_bytes", thrift.I64, 10)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "cache_num_managed_bytes", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.CacheNumManagedBytes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "cache_num_managed_bytes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "cache_num_managed_bytes", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldCacheNumManagedBytes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField10(oprot)
}

func (p *DomainStatisticsSummary) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("cache_max_num_managed_bytes", thrift.I64, 11)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "cache_max_num_managed_bytes", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.CacheMaxNumManagedBytes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "cache_max_num_managed_bytes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "cache_max_num_managed_bytes", p.ThriftName(), err); }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldCacheMaxNumManagedBytes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField11(oprot)
}

func (p *DomainStatisticsSummary) WriteField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.LatencySummary != nil {
    err = oprot.WriteFieldBegin("latency_summary", thrift.STRUCT, 12)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "latency_summary", p.ThriftName(), err); }
    err = p.LatencySummary.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("LatencySampleSummary", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "latency_summary", p.ThriftName(), err); }
  }
  return err
}

func (p *DomainStatisticsSummary) WriteFieldLatencySummary(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField12(oprot)
}

func (p *DomainStatisticsSummary) TStructName() string {
  return "DomainStatisticsSummary"
}

func (p *DomainStatisticsSummary) ThriftName() string {
  return "DomainStatisticsSummary"
}

func (p *DomainStatisticsSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainStatisticsSummary(%+v)", *p)
}

func (p *DomainStatisticsSummary) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DomainStatisticsSummary)
  if !ok {
    return 0, false
  }
  if p.Id != data.Id {
    if p.Id < data.Id {
      return -1, true
    }
    return 1, true
  }
  if p.ThroughputTotal != data.ThroughputTotal {
    if p.ThroughputTotal < data.ThroughputTotal {
      return -1, true
    }
    return 1, true
  }
  if p.ResponseDataThroughputTotal != data.ResponseDataThroughputTotal {
    if p.ResponseDataThroughputTotal < data.ResponseDataThroughputTotal {
      return -1, true
    }
    return 1, true
  }
  if p.NumRequestsTotal != data.NumRequestsTotal {
    if p.NumRequestsTotal < data.NumRequestsTotal {
      return -1, true
    }
    return 1, true
  }
  if p.NumHitsTotal != data.NumHitsTotal {
    if p.NumHitsTotal < data.NumHitsTotal {
      return -1, true
    }
    return 1, true
  }
  if p.NumL1CacheHitsTotal != data.NumL1CacheHitsTotal {
    if p.NumL1CacheHitsTotal < data.NumL1CacheHitsTotal {
      return -1, true
    }
    return 1, true
  }
  if p.NumL2CacheHitsTotal != data.NumL2CacheHitsTotal {
    if p.NumL2CacheHitsTotal < data.NumL2CacheHitsTotal {
      return -1, true
    }
    return 1, true
  }
  if p.CacheNumItems != data.CacheNumItems {
    if p.CacheNumItems < data.CacheNumItems {
      return -1, true
    }
    return 1, true
  }
  if p.CacheMaxNumItems != data.CacheMaxNumItems {
    if p.CacheMaxNumItems < data.CacheMaxNumItems {
      return -1, true
    }
    return 1, true
  }
  if p.CacheNumManagedBytes != data.CacheNumManagedBytes {
    if p.CacheNumManagedBytes < data.CacheNumManagedBytes {
      return -1, true
    }
    return 1, true
  }
  if p.CacheMaxNumManagedBytes != data.CacheMaxNumManagedBytes {
    if p.CacheMaxNumManagedBytes < data.CacheMaxNumManagedBytes {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.LatencySummary.CompareTo(data.LatencySummary); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DomainStatisticsSummary) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Id
  case 2: return p.ThroughputTotal
  case 3: return p.ResponseDataThroughputTotal
  case 4: return p.NumRequestsTotal
  case 5: return p.NumHitsTotal
  case 6: return p.NumL1CacheHitsTotal
  case 7: return p.NumL2CacheHitsTotal
  case 8: return p.CacheNumItems
  case 9: return p.CacheMaxNumItems
  case 10: return p.CacheNumManagedBytes
  case 11: return p.CacheMaxNumManagedBytes
  case 12: return p.LatencySummary
  }
  return nil
}

func (p *DomainStatisticsSummary) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("id", thrift.I32, 1),
    thrift.NewTField("throughput_total", thrift.DOUBLE, 2),
    thrift.NewTField("response_data_throughput_total", thrift.DOUBLE, 3),
    thrift.NewTField("num_requests_total", thrift.I64, 4),
    thrift.NewTField("num_hits_total", thrift.I64, 5),
    thrift.NewTField("num_l1_cache_hits_total", thrift.I64, 6),
    thrift.NewTField("num_l2_cache_hits_total", thrift.I64, 7),
    thrift.NewTField("cache_num_items", thrift.I64, 8),
    thrift.NewTField("cache_max_num_items", thrift.I64, 9),
    thrift.NewTField("cache_num_managed_bytes", thrift.I64, 10),
    thrift.NewTField("cache_max_num_managed_bytes", thrift.I64, 11),
    thrift.NewTField("latency_summary", thrift.STRUCT, 12),
    })
}

/**
 * Attributes:
 *  - DomainStatistics
 */
type RuntimeStatisticsSummary struct {
  thrift.TStruct
  DomainStatistics thrift.TMap "domain_statistics"; // 1
}

func NewRuntimeStatisticsSummary() *RuntimeStatisticsSummary {
  output := &RuntimeStatisticsSummary{
    TStruct:thrift.NewTStruct("RuntimeStatisticsSummary", []thrift.TField{
    thrift.NewTField("domain_statistics", thrift.MAP, 1),
    }),
  }
  {
  }
  return output
}

func (p *RuntimeStatisticsSummary) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "domain_statistics" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RuntimeStatisticsSummary) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype224, _vtype225, _size223, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.DomainStatistics", "", err)
  }
  p.DomainStatistics = thrift.NewTMap(_ktype224, _vtype225, _size223)
  for _i227:= 0; _i227 < _size223; _i227++ {
    v230, err231 := iprot.ReadString()
    if err231 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key228", "", err231); }
    _key228 := v230
    _val229 := NewDomainStatisticsSummary()
    err234 := _val229.Read(iprot)
    if err234 != nil { return thrift.NewTProtocolExceptionReadStruct("_val229DomainStatisticsSummary", err234); }
    p.DomainStatistics.Set(_key228, _val229)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *RuntimeStatisticsSummary) ReadFieldDomainStatistics(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RuntimeStatisticsSummary) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RuntimeStatisticsSummary")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RuntimeStatisticsSummary) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.DomainStatistics != nil {
    err = oprot.WriteFieldBegin("domain_statistics", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domain_statistics", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.DomainStatistics.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter235 := range p.DomainStatistics.Iter() {
      Kiter236, Viter237 := Miter235.Key().(string), Miter235.Value().(*DomainStatisticsSummary)
      err = oprot.WriteString(string(Kiter236))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter236", "", err); }
      err = Viter237.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("DomainStatisticsSummary", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domain_statistics", p.ThriftName(), err); }
  }
  return err
}

func (p *RuntimeStatisticsSummary) WriteFieldDomainStatistics(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RuntimeStatisticsSummary) TStructName() string {
  return "RuntimeStatisticsSummary"
}

func (p *RuntimeStatisticsSummary) ThriftName() string {
  return "RuntimeStatisticsSummary"
}

func (p *RuntimeStatisticsSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RuntimeStatisticsSummary(%+v)", *p)
}

func (p *RuntimeStatisticsSummary) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RuntimeStatisticsSummary)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.DomainStatistics.CompareTo(data.DomainStatistics); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *RuntimeStatisticsSummary) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DomainStatistics
  }
  return nil
}

func (p *RuntimeStatisticsSummary) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("domain_statistics", thrift.MAP, 1),
    })
}

func init() {
}

