/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package hank;

import (
        "thrift"
        "fmt"
)

import (
        "os"
)


type ISmartClient interface {
  /**
   * Parameters:
   *  - DomainName
   *  - Key
   */
  Get(domain_name string, key string) (retval287 *HankResponse, err os.Error)
  /**
   * Parameters:
   *  - DomainName
   *  - Keys
   */
  GetBulk(domain_name string, keys thrift.TList) (retval288 *HankBulkResponse, err os.Error)
}

type SmartClientClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewSmartClientClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SmartClientClient {
  return &SmartClientClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewSmartClientClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SmartClientClient {
  return &SmartClientClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

/**
 * Parameters:
 *  - DomainName
 *  - Key
 */
func (p *SmartClientClient) Get(domain_name string, key string) (retval289 *HankResponse, err os.Error) {
  err = p.SendGet(domain_name, key)
  if err != nil { return }
  return p.RecvGet()
}

func (p *SmartClientClient) SendGet(domain_name string, key string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId)
  args290 := NewGetArgs()
  args290.DomainName = domain_name
  args290.Key = key
  err = args290.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *SmartClientClient) RecvGet() (value *HankResponse, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error292 := thrift.NewTApplicationExceptionDefault()
    error293, err := error292.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error293
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result291 := NewGetResult()
  err = result291.Read(iprot)
  iprot.ReadMessageEnd()
  value = result291.Success
  return
}

/**
 * Parameters:
 *  - DomainName
 *  - Keys
 */
func (p *SmartClientClient) GetBulk(domain_name string, keys thrift.TList) (retval294 *HankBulkResponse, err os.Error) {
  err = p.SendGetBulk(domain_name, keys)
  if err != nil { return }
  return p.RecvGetBulk()
}

func (p *SmartClientClient) SendGetBulk(domain_name string, keys thrift.TList)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getBulk", thrift.CALL, p.SeqId)
  args295 := NewGetBulkArgs()
  args295.DomainName = domain_name
  args295.Keys = keys
  err = args295.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *SmartClientClient) RecvGetBulk() (value *HankBulkResponse, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error297 := thrift.NewTApplicationExceptionDefault()
    error298, err := error297.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error298
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result296 := NewGetBulkResult()
  err = result296.Read(iprot)
  iprot.ReadMessageEnd()
  value = result296.Success
  return
}


type SmartClientProcessor struct {
  handler ISmartClient
  processorMap map[string]thrift.TProcessorFunction
}

func (p *SmartClientProcessor) Handler() ISmartClient {
  return p.handler
}

func (p *SmartClientProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SmartClientProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *SmartClientProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSmartClientProcessor(handler ISmartClient) *SmartClientProcessor {

  self299 := &SmartClientProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self299.processorMap["get"] = &smartClientProcessorGet{handler:handler}
  self299.processorMap["getBulk"] = &smartClientProcessorGetBulk{handler:handler}
return self299
}

func (p *SmartClientProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x300 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x300.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x300
  }
  return process.Process(seqId, iprot, oprot)
}

type smartClientProcessorGet struct {
  handler ISmartClient
}

func (p *smartClientProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetResult()
  if result.Success, err = p.handler.Get(args.DomainName, args.Key); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err.String())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type smartClientProcessorGetBulk struct {
  handler ISmartClient
}

func (p *smartClientProcessorGetBulk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetBulkArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getBulk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetBulkResult()
  if result.Success, err = p.handler.GetBulk(args.DomainName, args.Keys); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBulk: " + err.String())
    oprot.WriteMessageBegin("getBulk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getBulk", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - DomainName
 *  - Key
 */
type GetArgs struct {
  thrift.TStruct
  DomainName string "domain_name"; // 1
  Key string "key"; // 2
}

func NewGetArgs() *GetArgs {
  output := &GetArgs{
    TStruct:thrift.NewTStruct("get_args", []thrift.TField{
    thrift.NewTField("domain_name", thrift.STRING, 1),
    thrift.NewTField("key", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "domain_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "key" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v301, err302 := iprot.ReadString()
  if err302 != nil { return thrift.NewTProtocolExceptionReadField(1, "domain_name", p.ThriftName(), err302); }
  p.DomainName = v301
  return err
}

func (p *GetArgs) ReadFieldDomainName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v303, err304 := iprot.ReadString()
  if err304 != nil { return thrift.NewTProtocolExceptionReadField(2, "key", p.ThriftName(), err304); }
  p.Key = v303
  return err
}

func (p *GetArgs) ReadFieldKey(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("domain_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domain_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DomainName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domain_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domain_name", p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteFieldDomainName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("key", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "key", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Key))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "key", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "key", p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteFieldKey(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetArgs) TStructName() string {
  return "GetArgs"
}

func (p *GetArgs) ThriftName() string {
  return "get_args"
}

func (p *GetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetArgs(%+v)", *p)
}

func (p *GetArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetArgs)
  if !ok {
    return 0, false
  }
  if p.DomainName != data.DomainName {
    if p.DomainName < data.DomainName {
      return -1, true
    }
    return 1, true
  }
  if p.Key != data.Key {
    if p.Key < data.Key {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DomainName
  case 2: return p.Key
  }
  return nil
}

func (p *GetArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("domain_name", thrift.STRING, 1),
    thrift.NewTField("key", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetResult struct {
  thrift.TStruct
  Success *HankResponse "success"; // 0
}

func NewGetResult() *GetResult {
  output := &GetResult{
    TStruct:thrift.NewTStruct("get_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewHankResponse()
  err307 := p.Success.Read(iprot)
  if err307 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessHankResponse", err307); }
  return err
}

func (p *GetResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HankResponse", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetResult) TStructName() string {
  return "GetResult"
}

func (p *GetResult) ThriftName() string {
  return "get_result"
}

func (p *GetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetResult(%+v)", *p)
}

func (p *GetResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}

/**
 * Attributes:
 *  - DomainName
 *  - Keys
 */
type GetBulkArgs struct {
  thrift.TStruct
  DomainName string "domain_name"; // 1
  Keys thrift.TList "keys"; // 2
}

func NewGetBulkArgs() *GetBulkArgs {
  output := &GetBulkArgs{
    TStruct:thrift.NewTStruct("getBulk_args", []thrift.TField{
    thrift.NewTField("domain_name", thrift.STRING, 1),
    thrift.NewTField("keys", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetBulkArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "domain_name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "keys" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetBulkArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v308, err309 := iprot.ReadString()
  if err309 != nil { return thrift.NewTProtocolExceptionReadField(1, "domain_name", p.ThriftName(), err309); }
  p.DomainName = v308
  return err
}

func (p *GetBulkArgs) ReadFieldDomainName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetBulkArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype315, _size312, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Keys", "", err)
  }
  p.Keys = thrift.NewTList(_etype315, _size312)
  for _i316:= 0; _i316 < _size312; _i316++ {
    v318, err319 := iprot.ReadString()
    if err319 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem317", "", err319); }
    _elem317 := v318
    p.Keys.Push(_elem317)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetBulkArgs) ReadFieldKeys(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetBulkArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getBulk_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetBulkArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("domain_name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domain_name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.DomainName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domain_name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "domain_name", p.ThriftName(), err); }
  return err
}

func (p *GetBulkArgs) WriteFieldDomainName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetBulkArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Keys != nil {
    err = oprot.WriteFieldBegin("keys", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "keys", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Keys.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter320 := range p.Keys.Iter() {
      Iter321 := Iter320.(string)
      err = oprot.WriteString(string(Iter321))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter321", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "keys", p.ThriftName(), err); }
  }
  return err
}

func (p *GetBulkArgs) WriteFieldKeys(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetBulkArgs) TStructName() string {
  return "GetBulkArgs"
}

func (p *GetBulkArgs) ThriftName() string {
  return "getBulk_args"
}

func (p *GetBulkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetBulkArgs(%+v)", *p)
}

func (p *GetBulkArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetBulkArgs)
  if !ok {
    return 0, false
  }
  if p.DomainName != data.DomainName {
    if p.DomainName < data.DomainName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Keys.CompareTo(data.Keys); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetBulkArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DomainName
  case 2: return p.Keys
  }
  return nil
}

func (p *GetBulkArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("domain_name", thrift.STRING, 1),
    thrift.NewTField("keys", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Success
 */
type GetBulkResult struct {
  thrift.TStruct
  Success *HankBulkResponse "success"; // 0
}

func NewGetBulkResult() *GetBulkResult {
  output := &GetBulkResult{
    TStruct:thrift.NewTStruct("getBulk_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    }),
  }
  {
  }
  return output
}

func (p *GetBulkResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetBulkResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewHankBulkResponse()
  err324 := p.Success.Read(iprot)
  if err324 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessHankBulkResponse", err324); }
  return err
}

func (p *GetBulkResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetBulkResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getBulk_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetBulkResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("HankBulkResponse", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetBulkResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetBulkResult) TStructName() string {
  return "GetBulkResult"
}

func (p *GetBulkResult) ThriftName() string {
  return "getBulk_result"
}

func (p *GetBulkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetBulkResult(%+v)", *p)
}

func (p *GetBulkResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetBulkResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetBulkResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  }
  return nil
}

func (p *GetBulkResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    })
}


